steps:
# Get the Image repo and tag name (version) from the k8s deploy manifest
# image_name.txt = repo + tag name
# image_repo.txt = repo name only
# image_tag.txt = tag name only
- id: 'Get Version'
  name: 'ubuntu'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    image_repo=$(grep -oP "repository:\s+\K(.*)" ${_HELM_VALUES_FILE}) || exit 1
    image_tag=$(grep -oP "appVersion:\s+\K(.*)" ${_HELM_CHART_FILE}) || exit 1
    echo $image_repo > image_repo.txt
    echo $image_tag > image_tag.txt
    echo $image_repo:$image_tag > image_name.txt
    cat image_name.txt

# Build the application container
- id: 'Build the application container'
  name: 'gcr.io/cloud-builders/docker'
  entrypoint: bash
  args: 
  - '-c'
  - 'docker build -t ${_TMP_IMAGE} .'

# Copy Test scripts to a volume so we can mount them in the app directory
# and run the tests from there
- id: 'Copy tests scripts'
  name: 'bash'
  volumes:
  - name: 'testsvol'
    path: '/persistent_volume/tests'
  args: ['cp', '-R', 'tests', '/persistent_volume']

# Get the credentials for accessing Google Storage, because the app needs those.
# And for Git because we need those to add a new Tag to the Git repo.
- id: 'Get GCP Creds'
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args: 
  - '-c'
  - |
    mkdir -p tmp &&
    gcloud secrets versions access latest --secret=${_GS_CREDS} > tmp/gs_creds.json &&
    gcloud secrets versions access latest --secret=${_GIT_USER} > tmp/git_user.txt &&
    gcloud secrets versions access latest --secret=${_GIT_PWD} > tmp/git_pwd.txt

# Run the application Unit tests
- id: 'Run Unit Tests'
  name: ${_TMP_IMAGE}
  volumes:
  - name: 'testsvol'
    path: '/abagdemo/tests'
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    /abagdemo/tests/testit.sh unit || exit 1
  env:
  - 'GOOGLE_APPLICATION_CREDENTIALS=tmp/gs_creds.json'

# Run the application Functional tests
- id: 'Run Functional Tests'
  name: ${_TMP_IMAGE}
  volumes:
  - name: 'testsvol'
    path: '/abagdemo/tests'
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    /abagdemo/tests/testit.sh functional || exit 1
  env:
  - 'GOOGLE_APPLICATION_CREDENTIALS=tmp/gs_creds.json'

# Get the credentials for Docker so we can push the container image there.
- id: 'Get Docker Creds'
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args: 
  - '-c'
  - |
    mkdir -p tmp &&
    gcloud secrets versions access latest --secret=${_DOCKER_USER} > tmp/docker_user.txt &&
    gcloud secrets versions access latest --secret=${_DOCKER_PWD} > tmp/docker_pwd.txt

# See if an image has already been created with this tag in
# Docker Hub, but only if we're merging into the master branch.
# (The container image is a copy of 'carinadigital/docker-ls').
- id: 'Search if Tag Exists'
  name: 'gcr.io/hazel-math-279814/docker-ls'
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    if test "$BRANCH_NAME" = "master"
    then 
        docker-ls tags --user "$(cat tmp/docker_user.txt)" --password "$(cat tmp/docker_pwd.txt)" $(cat image_repo.txt) > image_taglist.txt || exit 1
        cat image_taglist.txt
        grep $(cat image_tag.txt) image_taglist.txt -o > image_found.txt
        cat image_found.txt
    else
        echo "Skipping further steps because the branch $BRANCH_NAME is not master."
    fi

# Push the image to Docker Hub, but only if that tag
# doesn't already exist
- id: 'Push Image to Repo'
  name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: 
  - '-c'
  - |
    if test -f image_found.txt && test "$(cat image_found.txt)" != "$(cat image_tag.txt)"
    then
        echo $(cat tmp/docker_pwd.txt) | docker login --username $(cat tmp/docker_user.txt) --password-stdin || exit 1
        docker tag ${_TMP_IMAGE} $(cat image_name.txt) || exit 1
        docker push $(cat image_name.txt) || exit 1
    else
        echo "Skipped pushing Container Image to Registry"
    fi

# Add a new Tag to the GitHub repo, but only if that tag
# doesn't already exist
- id: 'Add Tag to Git Repo'
  name: 'gcr.io/cloud-builders/git'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    if test -f image_found.txt && test "$(cat image_found.txt)" != "$(cat image_tag.txt)"
    then
        mkdir tagclone
        cd tagclone
        git clone https://${_GIT_REPO} --config user.name=$(cat ../tmp/git_user.txt) --config user.email="no@nomail.com" || exit 1
        cd ${REPO_NAME}
        git tag -a "$(cat ../../image_tag.txt)" -m "${_GIT_TAG_CMT} $(cat ../../image_tag.txt)" || exit 1
        git push https://$(cat ../../tmp/git_user.txt):$(cat ../../tmp/git_pwd.txt)@${_GIT_REPO} --tags || exit 1
    else
        echo "Skipped creating Tag in Git"
    fi
  
substitutions:
    # Name of our application.
    _TMP_IMAGE: gcr.io/${PROJECT_ID}/${REPO_NAME}:${COMMIT_SHA}
    # Name of Google Secret that contains the credentials for our app
    # to connect to  Google Storage.
    _GS_CREDS: 'last-baron-abagdemo'
    # Name of the GitHub Repo where our code is.
    _GIT_REPO: github.com/fckuligowski/${REPO_NAME}
    # Name of Google Secrets for GitHub user name and password.
    _GIT_USER: 'fckuligowski-git-user'
    _GIT_PWD: 'fckuligowski-git-pwd'
    # The Git Tag's message field will use this value.
    _GIT_TAG_CMT: 'automatically generated by Google Cloud Build for ${REPO_NAME}'
    # Name of Google Secrets for Docker user name and password.
    _DOCKER_USER: 'fckuligowski-docker-user'
    _DOCKER_PWD: 'fckuligowski-docker-pwd'
    # Helm chart files, so we can get the tag version number.
    _HELM_APP: 'abagdemo'
    _HELM_DIR: 'helm/${_HELM_APP}'
    _HELM_VALUES_FILE: '${_HELM_DIR}/values.yaml'
    _HELM_CHART_FILE: '${_HELM_DIR}/Chart.yaml'

options:
    substitution_option: 'ALLOW_LOOSE'